#include "base/geometry.base.nks"

#begin vertex
    layout(location = 3) in ivec4 boneIds;
    layout(location = 4) in vec4 boneWeights;

    const int MAX_BONES = 128;
    const int MAX_BONE_INFLUENCE = 4;
    uniform mat4 boneMatrices[MAX_BONES];

    void main() {
        vec4 animatedPosition = vec4(0.0f);
        vec4 animatedNormal = vec4(0.0f);
        for (int i = 0; i < MAX_BONE_INFLUENCE; i++) {
            int boneId = boneIds[i];

            if (boneId == -1 || boneId >= MAX_BONES)
                continue;

            mat4 boneMatrix = boneMatrices[boneId];

            vec4 localPosition = boneMatrix * vec4(vertexPosition, 1.0);
            animatedPosition += localPosition * boneWeights[i];

            vec4 localNormal = boneMatrix * vec4(vertexNormal, 1.0);
            animatedNormal += localNormal * boneWeights[i];
        }

        vec4 worldSpacePos = modelMatrix * animatedPosition;
        gl_Position = _projectionMatrix * _viewMatrix * worldSpacePos;

        fragmentPosition = worldSpacePos.xyz;
        fragmentNormal = normalize(normalMatrix * animatedNormal.xyz);
        fragmentTexCoords = vertexTexCoords;
    }
#end vertex

