#include "base/postproc.base.nks"

#bind gPosition 0
#bind gNormal 1
#bind gAlbedo 2
#bind postMainTex 4

#inject CameraMatrices
#inject ScreenSize

// From https://community.khronos.org/t/screen-space-reflections/69987/2

#begin fragment

    uniform sampler2D gPosition;
    uniform sampler2D gNormal;
    uniform sampler2D gAlbedo;
    uniform sampler2D postMainTex;

    uniform mat4 _viewMatrix;
    uniform mat4 _projectionMatrix;

    const float rayStep = 0.25;
    const float minRayStep = 0.1;
    const int numRaySteps = 20;
    const float searchDist = 5;
    const float searchDistInv = 1 / searchDist;
    const int numBinarySearchSteps = 5;
    const float specularExponent = 1.5;

    in vec2 texCoords;
    out vec4 color;

    vec3 sampleViewPosition(vec2 uv) {
        return (_viewMatrix * textureLod(gPosition, uv, 2)).xyz;
    }

    vec2 project(vec3 vec) {
        vec4 clipSpace = _projectionMatrix * vec4(vec, 1.0f);
        vec2 ndc = clipSpace.xy / clipSpace.w;
        return ndc * 0.5 + 0.5;
    }

    vec3 binarySearch(vec3 dir, inout vec3 ray, out float dDepth) {
        float depth;

        for(int i = 0; i < numBinarySearchSteps; i++) {
            vec2 projectedCoord = project(ray);
            depth = sampleViewPosition(projectedCoord).z;
            dDepth = ray.z - depth;

            dir *= 0.5;
            if(dDepth > 0.0)
                ray += dir;
            else
                ray -= dir;
        }

        return vec3(project(ray), depth);
    }


    vec4 rayCast(vec3 dir, inout vec3 ray, out float dDepth)
    {
        dir *= rayStep;

        vec2 projectedCoord;
        float depth;

        for(int i = 0; i < numRaySteps; i++)
        {
            ray += dir;

            projectedCoord = project(ray);
            depth = sampleViewPosition(projectedCoord).z;
            dDepth = ray.z - depth;

            if((dir.z - dDepth) < 1.2 && dDepth <= 0.0)
                return vec4(binarySearch(dir, ray, dDepth), 1.0);
        }

        return vec4(projectedCoord, depth, 0.0);
    }


    void main() {
        float specular = clamp(texture(gNormal, texCoords).a, 0, 1);
        if (specular == 0)
            discard;

        vec3 viewNormal = normalize(mat3(_viewMatrix) * texture(gNormal, texCoords).xyz);
        vec3 viewPos = sampleViewPosition(texCoords);


        // Reflection vector
        vec3 reflected = reflect(normalize(viewPos), viewNormal);

        // Ray cast
        vec3 hitPos = viewPos;
        float dDepth;

        vec4 coords = rayCast(reflected * max(minRayStep, -viewPos.z), hitPos, dDepth);
        vec2 dCoords = smoothstep(0.2, 0.6, abs(vec2(0.5, 0.5) - coords.xy));
        float screenEdgefactor = clamp(1.0 - (dCoords.x + dCoords.y), 0.0, 1.0);

        float fac = pow(specular, specularExponent) * screenEdgefactor * coords.w;

        // Get color
        color = vec4(texture(postMainTex, coords.xy).rgb, fac);
    }
#end fragment