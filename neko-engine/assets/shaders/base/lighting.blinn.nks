#begin vertex
    in vec3 position;

    uniform mat4 projectionMatrix;
    uniform mat4 viewMatrix;
    uniform mat4 modelMatrix;

    void main(void) {
        gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
    }
#end vertex

#begin fragment
    struct Light {
        vec3 position;
        vec4 color;
        float constant;
        float linear;
        float quadratic;
    };

    out vec4 color;

    uniform vec2 screenSize;
    uniform vec3 cameraPos;
    uniform Light light;

    uniform sampler2D gPosition;
    uniform sampler2D gNormal;
    uniform sampler2D gAlbedo;

    void main() {
        vec2 texCoords = gl_FragCoord.xy / screenSize;
        vec3 position = texture(gPosition, texCoords).xyz;
        vec3 normal = texture(gNormal, texCoords).xyz;

        vec4 albedo = texture(gAlbedo, texCoords);

        vec3 lightDir = normalize(light.position - position);
        vec3 viewDir = normalize(cameraPos - position);
        vec3 halfway = normalize(lightDir + viewDir);

        float shininess = 2f; // TODO: Load from material

        vec3 lightRgb = light.color.rgb;
        vec3 diffuse = lightRgb * max(dot(normal, lightDir), 0.0f);
        vec3 specular = lightRgb * pow(max(dot(normal, halfway), 0.0), shininess);
        float distance = length(light.position - position);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);

        color = vec4(albedo.rgb * attenuation * (diffuse + specular), 1.0f);
    }

#end fragment