#version 330 core

#begin shared
    vec3 fragmentColor;
    vec3 fragmentNormal;
    vec2 fragmentTexCoords;
#end shared

#begin vertex
    layout(location = 0) in vec3 vertexPosition;
    layout(location = 1) in vec3 vertexColor;
    layout(location = 2) in vec3 vertexNormal;
    layout(location = 3) in vec2 vertexTexCoords;

    uniform mat4 viewMatrix;
    uniform mat4 projectionMatrix;
    uniform mat4 modelMatrix;

    void main() {
        gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(vertexPosition, 1.0f);

        // TODO: Zero vertex colors should be ignored if no color data is loaded

        fragmentColor = vertexColor;
        fragmentNormal = (modelMatrix * vec4(vertexNormal, 1.0f)).xyz;
        fragmentTexCoords = vertexTexCoords;
    }
#end vertex

#begin fragment
    out vec4 color;

    uniform sampler2D textureSampler;

    void main() {
        vec4 baseColor = texture(textureSampler, fragmentTexCoords); // * vec4(fragmentColor, 1.0);
        if (baseColor.a <= 0.15)
            discard;

        vec3 lightPos = vec3(2,2,0);
        float diffuse = min(max(dot(fragmentNormal, lightPos), 0.0), 1.0);
        float ambient = 0.15;

        color = baseColor * (0.5 + diffuse*0.5);
        color.a = 1.0f;
    }
#end fragment