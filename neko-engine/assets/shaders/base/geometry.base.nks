#inject CameraMatrices

#bind normalSampler 1

#begin shared
    vec3 fragmentPosition;
    vec3 fragmentNormal;
    vec2 fragmentTexCoords;
#end shared

#begin vertex
    layout(location = 0) in vec3 vertexPosition;
    layout(location = 1) in vec3 vertexNormal;
    layout(location = 2) in vec2 vertexTexCoords;

    uniform mat4 _viewMatrix;
    uniform mat4 _projectionMatrix;
    uniform mat4 modelMatrix;
    uniform mat3 normalMatrix;
#end vertex

#begin fragment
    layout(location = 0) out vec4 gPosition;
    layout(location = 1) out vec4 gNormal;
    layout(location = 2) out vec4 gAlbedo;

    uniform float emissive;
    uniform float specular;
    uniform float shininess;
    uniform vec4 diffuseColor;

    uniform sampler2D textureSampler;
    uniform sampler2D normalSampler;

    // Generates the TBN matrix
    mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv) {
        // get edge vectors of the pixel triangle
        vec3 dp1 = dFdx(p);
        vec3 dp2 = dFdy(p);
        vec2 duv1 = dFdx(uv);
        vec2 duv2 = dFdy(uv);

        // solve the linear system
        vec3 dp2perp = cross(dp2, N);
        vec3 dp1perp = cross(N, dp1);
        vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
        vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;

        // construct a scale-invariant frame
        float invmax = inversesqrt(max(dot(T,T), dot(B,B)));
        return mat3(T * invmax, B * invmax, N);
    }

    void main() {
        vec4 textureColor = texture(textureSampler, fragmentTexCoords);
        if (textureColor.a <= 0.15)
            discard;

        vec3 normalMap = normalize(texture(normalSampler, fragmentTexCoords).rgb * 2.0 - 1.0);
        mat3 tbn = cotangent_frame(fragmentNormal, -fragmentPosition, fragmentTexCoords);
        vec3 perturbedNormal = normalize(tbn * normalMap);

        textureColor.rgb *= diffuseColor.rgb;

        gPosition = vec4(fragmentPosition, emissive);   // Encode as PositionEmissive
        gNormal = vec4(perturbedNormal, specular);      // Encode as NormalSpecular
        gAlbedo = vec4(textureColor.rgb, shininess);    // Encode as AlbedoShininess
    }
#end fragment