#inject CameraMatrices

#begin shared
    vec3 fragmentPosition;
    vec3 fragmentNormal;
    vec2 fragmentTexCoords;
#end shared

#begin fragment
    layout(location = 0) out vec4 gPosition;
    layout(location = 1) out vec4 gNormal;
    layout(location = 2) out vec4 gAlbedo;

    uniform float specular;
    uniform float shininess;
    uniform vec4 diffuseColor;

    uniform sampler2D textureSampler;

    void main() {
        vec4 textureColor = texture(textureSampler, fragmentTexCoords);
        if (textureColor.a <= 0.15)
            discard;

        textureColor.rgb *= diffuseColor.rgb;

        gPosition = vec4(fragmentPosition, 1.0f);
        gNormal = vec4(fragmentNormal, specular);       // Encode as NormalSpecular
        gAlbedo = vec4(textureColor.rgb, shininess);    // Encode as AlbedoShininess
    }
#end fragment