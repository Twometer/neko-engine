#include "base/postproc.base.nks"

// From https://www.shadertoy.com/view/ls3GWS

#inject ScreenSize

#bind tex 4

#begin fragment
    out vec4 FragColor;
    in vec2 texCoords;

    uniform sampler2D tex;
    uniform vec2 _screenSize;

    #define FXAA_SPAN_MAX     24.0
    #define FXAA_REDUCE_MUL   (1.0 / FXAA_SPAN_MAX)
    #define FXAA_REDUCE_MIN   (1.0 / 128.0)
    #define FXAA_SUBPIX_SHIFT (1.0 / 4.0)

    vec3 fxaaImpl(vec4 uv, vec2 rcpFrame) {
        vec3 rgbNW = texture(tex, uv.zw, 0.0).xyz;
        vec3 rgbNE = texture(tex, uv.zw + vec2(1, 0)*rcpFrame.xy, 0.0).xyz;
        vec3 rgbSW = texture(tex, uv.zw + vec2(0, 1)*rcpFrame.xy, 0.0).xyz;
        vec3 rgbSE = texture(tex, uv.zw + vec2(1, 1)*rcpFrame.xy, 0.0).xyz;
        vec3 rgbM  = texture(tex, uv.xy, 0.0).xyz;

        vec3 luma = vec3(0.299, 0.587, 0.114);
        float lumaNW = dot(rgbNW, luma);
        float lumaNE = dot(rgbNE, luma);
        float lumaSW = dot(rgbSW, luma);
        float lumaSE = dot(rgbSE, luma);
        float lumaM  = dot(rgbM, luma);

        float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
        float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));

        vec2 dir;
        dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
        dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));

        float dirReduce = max(
            (lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),
            FXAA_REDUCE_MIN
        );
        float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);

        dir = min(
            vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),
            max(
                vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
                dir * rcpDirMin
            )
        ) * rcpFrame.xy;

        vec3 rgbA = (1.0 / 2.0) * (texture(tex, uv.xy + dir * (1.0 / 3.0 - 0.5), 0.0).xyz + texture(tex, uv.xy + dir * (2.0 / 3.0 - 0.5), 0.0).xyz);
        vec3 rgbB = rgbA * (1.0 / 2.0) + (1.0 / 4.0) * (texture(tex, uv.xy + dir * (0.0 / 3.0 - 0.5), 0.0).xyz + texture(tex, uv.xy + dir * (3.0 / 3.0 - 0.5), 0.0).xyz);

        float lumaB = dot(rgbB, luma);
        if ((lumaB < lumaMin) || (lumaB > lumaMax))
            return rgbA;
        else
            return rgbB;
    }

    void main() {
        vec2 rcpFrame = 1.0f / _screenSize;
        vec4 uv = vec4(texCoords, texCoords - (rcpFrame * (0.5 + FXAA_SUBPIX_SHIFT)));
        vec3 col = fxaaImpl(uv, rcpFrame);
        FragColor = vec4(col, 1.0f);
    }
#end fragment